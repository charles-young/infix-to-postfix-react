{"version":3,"sources":["util/Stack.js","util/InfixToPostfix.js","App.js","serviceWorker.js","index.js"],"names":["Stack","Object","classCallCheck","this","items","elem","push","length","pop","InfixToPostfix","ch","exp","replace","result","stack","i","c","charAt","test","console","log","isEmpty","peek","prec","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","infix","postfix","handleChange","bind","assertThisInitialized","event","setState","target","value","convert","trim","react_default","a","createElement","className","id","type","autoComplete","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAwBeA,oBAvBX,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACXG,KAAKC,MAAQ,oDAGZC,GACDF,KAAKC,MAAME,KAAKD,iCAIhB,OAA0B,IAAtBF,KAAKC,MAAMG,OACJ,YACJJ,KAAKC,MAAMI,qCAIlB,OAAOL,KAAKC,MAAMD,KAAKC,MAAMG,OAAS,qCAItC,OAA6B,IAAtBJ,KAAKC,MAAMG,iBCuCXE,oGAxDCC,GACR,OAAQA,GACJ,QACI,OAAQ,EACZ,IAAK,IACL,IAAK,IACD,OAAO,EAEX,IAAK,IACL,IAAK,IACD,OAAO,EAEX,IAAK,IACD,OAAO,mCAIJC,GACXA,EAAMA,EAAIC,QAAQ,KAAM,IAIxB,IAHA,IAAIC,EAAS,GACTC,EAAQ,IAAId,EAEPe,EAAI,EAAGA,EAAIJ,EAAIJ,OAAQQ,IAAK,CACjC,IAAIC,EAAIL,EAAIM,OAAOF,GAEnB,GAAI,eAAeG,KAAKF,GACpBH,GAAUG,EACVG,QAAQC,IAAIP,QACT,GAAU,MAANG,EACPF,EAAMR,KAAKU,QAEX,GAAU,MAANA,EAAW,CACX,MAAQF,EAAMO,WAA8B,MAAjBP,EAAMQ,QAC7BT,GAAUC,EAAMN,MAEpB,IAAKM,EAAMO,WAA8B,MAAjBP,EAAMQ,OAC1B,MAAO,qBAEPR,EAAMN,UAEP,CACH,MAAQM,EAAMO,WAAalB,KAAKoB,KAAKP,IAAMb,KAAKoB,KAAKT,EAAMQ,SACvDT,GAAUC,EAAMN,MAEpBM,EAAMR,KAAKU,IAIvB,MAAQF,EAAMO,WACVR,GAAUC,EAAMN,MAGpB,OAAOK,WClBAW,cAhCX,SAAAA,IAAc,IAAAC,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACVC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAuB,GAAAI,KAAAzB,QACK0B,MAAQ,CACTC,MAAO,GACPC,QAAS,IAEbN,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBhC,OAAAiC,EAAA,EAAAjC,QAAAiC,EAAA,EAAAjC,CAAAwB,KANVA,4EASDU,GACThC,KAAKiC,SAAS,CACVN,MAAOK,EAAME,OAAOC,MACpBP,QAAStB,EAAe8B,QAAQJ,EAAME,OAAOC,MAAME,2CAKvD,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAOE,GAAG,QAAQC,KAAK,OAAOC,aAAa,MAAMC,YAAY,mBACtDV,MAAOnC,KAAK0B,MAAMC,MAClBmB,SAAU9C,KAAK6B,eACtBS,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACH1C,KAAK0B,MAAME,iBA1BdmB,aCQEC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAQC,SAASC,eAAe,SDuHxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.ab0bb740.chunk.js","sourcesContent":["class Stack {\n    constructor() {\n        this.items = [];\n    }\n\n    push(elem) {\n        this.items.push(elem);\n    }\n\n    pop() {\n        if (this.items.length === 0)\n            return \"Underflow\";\n        return this.items.pop();\n    }\n\n    peek() {\n        return this.items[this.items.length - 1];\n    }\n\n    isEmpty() {\n        return this.items.length === 0;\n    }\n}\n\nexport default Stack;","import Stack from \"./Stack\";\n\nclass InfixToPostfix {\n    static prec(ch) {\n        switch (ch) {\n            default:\n                return -1;\n            case '+':\n            case '-':\n                return 1;\n\n            case '*':\n            case '/':\n                return 2;\n\n            case '^':\n                return 3;\n        }\n    }\n\n    static convert(exp) {\n        exp = exp.replace(/ /g, '');\n        let result = \"\";\n        let stack = new Stack();\n\n        for (let i = 0; i < exp.length; i++) {\n            let c = exp.charAt(i);\n\n            if (/[A-Za-z0-9]/i.test(c)) { // test if c is letter or digit\n                result += c;\n                console.log(result);\n            } else if (c === '(') {\n                stack.push(c);\n            } else {\n                if (c === ')') {\n                    while (!stack.isEmpty() && stack.peek() !== '(') {\n                        result += stack.pop();\n                    }\n                    if (!stack.isEmpty() && stack.peek() !== '(') {\n                        return \"Invalid Expression\";\n                    } else {\n                        stack.pop();\n                    }\n                } else {\n                    while (!stack.isEmpty() && this.prec(c) <= this.prec(stack.peek())) {\n                        result += stack.pop();\n                    }\n                    stack.push(c);\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            result += stack.pop();\n        }\n\n        return result;\n    }\n}\n\nexport default InfixToPostfix;","import React, {Component} from 'react';\nimport './App.css';\nimport InfixToPostfix from \"./util/InfixToPostfix\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            infix: '',\n            postfix: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({\n            infix: event.target.value,\n            postfix: InfixToPostfix.convert(event.target.value.trim())\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h3>Infix</h3>\n                <input id=\"infix\" type=\"text\" autoComplete=\"off\" placeholder=\"Infix Expression\"\n                       value={this.state.infix}\n                       onChange={this.handleChange}/>\n                <h3>Postfix</h3>\n                <div id=\"postfix\">\n                    {this.state.postfix}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}